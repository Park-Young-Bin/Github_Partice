3. 깃과 브랜치

3.1 브랜치(Branch)란?
(1) 브랜치가 필요한 이유
모든 버전 관리 시스템에는 [ 브랜치 ] 라는 개념이 있습니다. 원래 브랜치라는 용어는 나뭇가지라는 의미를 가지고 있다.
버전 관리 시스템에서 브랜치는 나무가 가지에서 새 줄기를 뻗듯이 여러 갈래로 퍼지는 데이터 흐름을 가리키는 말로 사용한다.
브랜치를 사용하면 제대로 동작하는 소스는 그대로 두고 새 소스를 추가해 버전을 따로 만들어 관리하기 때문에
브랜치한 프로젝트를 완벽하게 완성한 다음 원래 소스에 합칠 수 있어서 프로그램을 개발할 때 유용하게 사용된다.

(2) 브랜치의 기능
깃으로 [ 버전 관리 ] 를 시작하면 기본적으로 [ master ] 라는 [ 브랜치 ] 가 만들어진다.
사용자가 커밋 할 때마다 master 브랜치는 [ 최신 커밋 ] 을 가리킨다.

- 분기(branch)
기존에 저장한 파일을 master 브랜치에 그대로 유지하면서 기존 파일 내용을 수정하거나 새로운 기능을 구현할 파일을 만들 수 있다.

- 병합(merge)
새 브랜치에서 원하는 작업을 다 끝냈다면 새 브랜치에 있던 파일을 원래 master 브랜치에 합칠 수 있다.

3.2 브랜치 만들기
- git log를 실행 하면 HEAD가 master 브랜치를 가리키고 있다. HEAD는 여러 브랜치 중에서 현재 작업 중인 브랜치를 가리킨다.
- HEAD → master: 현재 작업 중인 브랜치는 master 브랜치라는 의미이다.
(1) 새 브랜치 만들기
- git branch: 깃에서 브랜치를 만들거나 확인할 수 있다.
- git branch 브랜치이름: 새로운 브랜치를 만든다. ex) git branch apple
- git checkout 브랜치이름: 만들어 두었던 각 브랜치 사이를 이동할 수 있다. git checkout master
- git merge 브랜치이름: 브랜치를 병합할 수 있다.

3.3 브랜치 정보 확인하기
- git log --online: 한 줄에 한 커밋 씩 보여준다.
- git log --branches: 각 브랜치의 커밋을 함께 볼 수 있다.
- git log --graph: 브랜치와 커밋의 관계를 그래프 형태로 표시한다.
- git log 브랜치이름 ..브랜치이름: 마침표 왼쪽에 있는 브랜치를 기준으로 오른쪽 브랜치와 비교한다. ex) git log apple ..master

3.4 브랜치 병합하기
- git init 디렉터리: 새로운 디렉터리를 만들고 저장소를 초기화하는 과정을 한꺼번에 처리할 수 있다.
- branch -d 브랜치이름: 브랜치를 삭제한다([-D] 대문자 D 옵션을 사용할 경우 강제로 브랜치를 삭제한다. 
				삭제한 브랜치는 같은 이름으로 다시 브랜치를 만들면 예전에 작업했던 내용이 그대로 나타난다.
				브랜치를 삭제한다는 것은 저장소에서 없애는 것이 아니라 깃의 흐름 속에서 감추는 것이다.)

master는 [ 특별한 브랜치 ] 이다. 저장소를 만들때 기본적으로 master 브랜치가 만들어진다.
여기서 [ * ] 표시는 master 브랜치에서 작업하고 있다는 의미이다.

git checkout 명령어를 사용하여 다른 브랜치(apple)로 이동한다.
화면 결과를 보면 저장소에 apple, ms, google 3개의 브랜치가 있고 HEAD -> apple 이므로 현재 작업 중인 브랜치는 apple 이라는 의미이다.

브랜치를 삭제할때 주의할점은 [ 저장소의 기본 브랜치 ] 를 알아야한다. 기본 브랜치가 master 이므로 브랜치를 삭제하려면 master 브랜치에서 해야 한다.
그래서 현재 브랜치가 master 브랜치가 아니라면 master 브랜치로 체크아웃 해야 한다.

3.5 브랜치 관리하기
- git stash: 수정 중인 파일을 감추거나 되돌릴 수 있다.


