2. 깃으로 버전 관리하기
깃에서는 문서를 수정할 때마다 간단한 메모와 함께 수정 내용을 스냅숏으로 찍어서 저장합니다. 이것을 '버전'이라고 한다.
이 장에서는 문서를 수정하면서 수정 내용을 버전으로 저장하는 방법과 저장한 버전을 사용해 이전 내용으로 되돌리는 방법을 살필 것이다.

2.1 깃 저장소 만들기
(1) 깃 초기화 하기(git init)
- git init: 깃을 사용할 수 있도록 디렉터리를 초기화한다.
>> 이것을 실행하면 처음과 다르게 '.git'이라는 디렉터리가 생겼는데 이 디렉터리가 깃을 사용하면서 버전이 저장될 '저장소(repository)'이다.
-----------------------------------------------------------------------------------------------------------
2.2 버전 만들기
(1) 깃에서 버전이란
초안 → 수정 → 수정2 → 수정3 > ... → 최종 → 최최종 
깃에서 버전을 관리하면 원래 파일 이름은 그대로 유지하면서 파일에서 무엇을 변경했는지를 변경 시점마다 저장할 수 있다. 또한 각 버전마다 작업했던 내용을 확인할 수 있고, 그 버전으로 돌아갈 수 있다.

(2) 스테이지와 커밋 이해하기
- 작업트리: 파일 수정, 저장 등의 작업을 하는 디렉터리 / 우리 눈에 보이는 디렉터리
- 스테이지: 버전으로 만든 파일이 대기하는 곳 / 예를 들어 작업 트리에서 10개의 파일을 수정했는데 4개의 파일만 버전으로 만들려면 4개의 파일만 스테이지로 넘긴다.(우리 눈에 안 보임)
- 저장소: 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳(= 리포지토리 or 저장소) / git 디렉터리 안에 숨은 파일 형태로 존재하는 영역(우리 눈에 안 보임)
>> 작업 트리에서 문서 수정, 수정한 파일을 버전으로 만들고 싶을 때 스테이지에 저장, 스테이지에 있던 파일을 저장소로 커밋하는 것이 깃이 버전을 만드는 순서이다.
>> 커밋 명령을 내리면 새로운 버전이 생성되면서 스테이지에 대기하고 있던 파일이 모두 저장소(리포지토리)에 저장된다.
- vim hello.txt: 'hello.txt'라는 파일 생성
- git status: 깃 상태 확인하기

(3) 작업 트리에서 빔으로 문서 수정하기
- Untracked files: 한번도 버전 관리하지 않은 파일(작업 트리에 있는 상태)

(4) 수정한 파일을 스테이징하기(git add) >> 버전 만들 준비 끝
작업 트리에서 파일을 만들거나 수정했다면 스테이지에 수정한 파일을 추가한다. 이렇게 깃에게 버전 만들 준비를 하라고 알려주는 것을 '스테이징' 또는 '스테이지에 올린다'라고 표현한다.
- git add hello.txt: 수정한 'hello.txt' 파일 스테이징하기
>> git status 실행 → 'Untracked files'라는 문구가 'changes to be committed'로 바뀜(스테이지에 올라간 상태)
- new file: '새 파일 ~을 (앞으로) 커밋할 것이다'라는 뜻

(5) 스테이지에 올라온 파일 커밋하기(git commit)
- 커밋한다(commit) = "버전을 만든다."
- git commit -m "message1": 스테이지에 올라온 파일을 커밋 → 스테이지에 있던 hello.txt 파일이 저장소에 추가된다.(저장소에 올라간 상태)
- git log: 저장소에 저장된 버전 확인하기 → 커밋을 만든 사람, 만든 시간, 커밋 메시지가 함께 나타남, 수정한 파일을 커밋하면 이렇게 수정관 관련된 여러 정보를 함께 저장할 수 있고 필요할때 확인 가능하다.

(6) 스테이징과 커밋 한꺼번에 처리하기(git commit -am)
- git commit -am: 스테이지에 올리고 커밋하는 과정을 한꺼번에 처리할 수 있다. 
※ 이 방법은 한 번이라도 커밋한 적이 있는 파일을 다시 커밋할 때만 사용할 수 있다.

★ 내용 요약 ★
1) 작업 트리에서 문서를 수정한다.

2) 수정한 파일 중 버전으로 만들고 싶은 것은 스테이지에 저장한다.

3) 스테이지에 있던 파일을 저장소로 커밋을 해준다.
-----------------------------------------------------------------------------------------------------------
2.3 커밋 내용 확인하기
버전을 관리하기 위해서는 지금까지 어떤 버전을 만들었는지 알 수 있어야 한다. 또 각 버전마다 어떤 차이가 있는지도 파악해야 한다.

(1) 커밋 기록 자세히 살펴보기(git log)

(2) 변경 사항 확인하기(git diff)
- git diff: 작업 트리에 있는 파일과 스테이지에 있는 파일을 비교하거나, 스테이지에 있는 파일과 저장소에 있는 최신 커밋을 비교해서 수정한 파일을 커밋하기 전에 최종적으로 검토할 수 있다.
-----------------------------------------------------------------------------------------------------------
2.4 버전 만드는 단계마다 파일 상태 알아보기
깃에서는 버전을 만드는 각 단계마다 파일 상태를 다르게 표시한다. 그래서 파일의 상태를 이해하면 이 파일이 버전 관리의 여러 단계 중 어디에 있는지, 그 상태에서 어떤 일을 할 수 있는지 알 수 있다.
(1) tracked 파일과 untracked 파일
예) [hello.txt 파일은 기존의 파일을 수정한 것이고, hello2.txt은 새로 생성한 상태]
[이 상태로 git statue 실행]
- tracked -
커밋했던 파일은 Changes not staged for commit 이라고 표시된다. 변경된 파일이 아직 스테이지에 올라가지 않았다는 뜻이다.
[ modified: ] 이라고 표시되어 있는것은 hello.txt가 수정되었다는 것을 알 수 있다.이렇게 깃은 한번이라도 커밋을 한 파일의 수정 여부를 계속 추적하게 된다.

- untracked -
[ Untracked files: ] 이라고 표시된 hello2.txt 파일은 한 번도 깃에서 버전 관리를 하지 않았기 때문에 수정 내역을 추적하지 않는다.

- git log는 각 커밋에 어떤 파일들이 관련되어 있는지 알 수 없다 
→ git log 명령에 --stat 옵션 이용 >> 가장 최근의 커밋부터 순서대로 커밋 메시지와 관련된 파일이 나열된다. / Q를 누르면 로그 화면에서 나올 수 있다.

(2) unmodified, modified, staged 상태
- tracked 상태인 파일: 한 번이라도 버전을 만들었던 파일, 깃 명령으로 파일 상태를 확인하면 현재 작업 트리에 있는지, 스테이지에 있는지 등 구체적인 상태를 알려줌
- unmodified 상태: 'working tree clean' 메시지
- modified 상태: 'Changes not stage for commit' 메시지 / 파일이 수정만 된 상태
- staged 상태: 'Changes to be committed' 메시지 / 컴밋 직전 단계

+ git commit --amend: 방금 커밋한 메세지 수정하기('|' 눌러 입력 모드로 바꾼 후 메시지 수정 가능)
-----------------------------------------------------------------------------------------------------------
2.5 작업 되돌리기
(1) 작업 트리에서 수정한 파일 되돌리기(git restore)
- git restore: 작업 트리에서 수정한 내용 변경하기 (git의 버전이 변경되면서 checkout → restore과 switch로 기능이 분리됨)
                                                              ※ http://honeymon.io/tech/2019/08/30/git-2.23-release.html 참고

(2) 스테이징 되돌리기(git reset HEAD 파일 이름)
- git reset HEAD hello2.txt: 수정된 hello2.txt을 스테이징한(= git add hello2.txt) 후, 스테이징을 취소하기 → git status로 파일이 아직 스테이지에 올라가지 않았다는 것을 확인 가능(not staged)

(3) 최신 커밋 되돌리기(git reset HEAD^)
- git reset HEAD^: 수정된 파일을 스테이징하고 커밋까지 했을 때, 가장 마지막엔 한(= 가장 최근) 커밋을 취소하기

(4) 특정 커밋으로 되돌리기(git rest 커밋 해시)
- git rest --hard 복사한 커밋 해시: 특정한 커밋으로 되돌린다.('해당 커밋 이후에 만들었던 커밋을 삭제하고 해당 커밋으로 이동하겠다'는 의미)

(5) 커밋을 삭제하지 않고 되돌리기(git revert)
- git revert 복사한 커밋 해시: 나중에 사용할 것을 대비해서 커밋을 되돌리더라도 취소한 커밋을 남겨두어야 할 때 사용한다.
▷ 이것을 실행하면 기본 편집기가 자동으로 나타나면서 커밋 메시지를 입력할 수 있다.(남겨둘 내용이 있다면 입력하고 저장한다. ':wq'입력!)
▷ 기존의 커밋은 사라지지 않았음(git log로 확인 가능)

※ reset의 경우에는 reset 명령 뒤에 되돌아갈 커밋 해시를 지정햇지만, revert 명령의 경우에는 revert 명령 뒤에 취소하려고 하는 버전의 커밋 해시를 지정한다.
예시) R2로 되돌아가기 → git reset --hard 복사한 커밋 해시(R2)
        R5 직전 커밋 R2로 되돌아가기 → git revert 복사한 R5 커밋 해시(R5)



